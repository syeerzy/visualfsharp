<Project>

  <PropertyGroup>
    <GeneratedFSharpInternalsVisibleToFile>$(IntermediateOutputPath)$(MSBuildProjectName).InternalsVisibleTo$(DefaultLanguageSourceExtension)</GeneratedFSharpInternalsVisibleToFile>
  </PropertyGroup>

  <ItemDefinitionGroup>
    <InternalsVisibleTo>
      <Visible>false</Visible>
    </InternalsVisibleTo>
  </ItemDefinitionGroup>

  <Target Name="PrepareFSharpGenerateInternalsVisibleToFile"
          Condition="'@(InternalsVisibleTo)' != ''">
    <PropertyGroup Condition="'$(MonoPackaging)' != 'true'">
      <_PublicKey>002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293</_PublicKey>
    </PropertyGroup>
    <PropertyGroup Condition="'$(MonoPackaging)' == 'true'">
      <_PublicKey>002400000480000094000000060200000024000052534131000400000100010077d32e043d184cf8cebf177201ec6fad091581a3a639a0534f1c4ebb3ab847a6b6636990224a04cf4bd1aec51ecec44cf0c8922eb5bb2ee65ec3fb9baa87e141042c96ce414f98af33508c7e24dab5b068aa802f6693881537ee0efcb5d3f1c9aaf8215ac42e92ba9a5a02574d6890d07464cb2f338b043b1c4ffe98efe069ee</_PublicKey>
    </PropertyGroup>
    <ItemGroup>
      <_InternalsVisibleToAttribute Include="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
        <_Parameter1 Condition="'%(InternalsVisibleTo.Key)' != ''">%(InternalsVisibleTo.Identity), PublicKey=%(InternalsVisibleTo.Key)</_Parameter1>
        <_Parameter1 Condition="'%(InternalsVisibleTo.Key)' == ''">%(InternalsVisibleTo.Identity), PublicKey=$(_PublicKey)</_Parameter1>
      </_InternalsVisibleToAttribute>
    </ItemGroup>
  </Target>

  <Target Name="GenerateFSharpInternalsVisibleToFile"
          Inputs="$(MSBuildProjectFile)"
          Outputs="$(GeneratedFSharpInternalsVisibleToFile)"
          DependsOnTargets="PrepareFSharpGenerateInternalsVisibleToFile;PrepareForBuild"
          Condition="'@(InternalsVisibleTo)' != ''"
          BeforeTargets="CoreCompile">

    <PropertyGroup>
      <!-- xbuild and older versions of msbuild don't have F# support for WriteCodeFragment -->
      <_UseWriteCodeFragmentHack Condition="'$(OS)' == 'Unix' and '$(Language)' == 'F#'">true</_UseWriteCodeFragmentHack>
    </PropertyGroup>

    <!--

    Using WriteCodeFragment

    -->
    <WriteCodeFragment AssemblyAttributes="@(_InternalsVisibleToAttribute)"
                       Language="$(Language)"
                       OutputFile="$(GeneratedFSharpInternalsVisibleToFile)"
                       Condition="'$(_UseWriteCodeFragmentHack)' != 'true'">
      <Output TaskParameter="OutputFile" ItemName="CompileBefore" Condition="'$(Language)' == 'F#'" />
      <Output TaskParameter="OutputFile" ItemName="Compile" Condition="'$(Language)' != 'F#'" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>

    <!--

    Using WriteLinesToFile

    -->
    <Message Text="Using `WriteLinesToFile` hack; writing to $(GeneratedFSharpInternalsVisibleToFile)" Condition="'$(_UseWriteCodeFragmentHack)' == 'true'" />
    <ItemGroup Condition="'$(_UseWriteCodeFragmentHack)' == 'true'">
      <_LinesToWrite Include="// &lt;auto-generated&gt;" />
      <_LinesToWrite Include="namespace FSharp" />
      <_LinesToWrite Include="open System" />
      <_LinesToWrite Include="open System.Reflection" />
      <_LinesToWrite Include="[&lt;assembly: %(_InternalsVisibleToAttribute.Identity)(&quot;%(_InternalsVisibleToAttribute._Parameter1)&quot;)&gt;]" />
      <_LinesToWrite Include="do()" />

      <Compile Include="$(GeneratedFSharpInternalsVisibleToFile)" Condition="'$(Language)' != 'F#' or '$(AssemblyName)' == 'FSharp.Core'" />
      <CompileBefore Include="$(GeneratedFSharpInternalsVisibleToFile)" Condition="'$(Language)' == 'F#' and '$(AssemblyName)' != 'FSharp.Core'" />
      <FileWrites Include="$(GeneratedFSharpInternalsVisibleToFile)" />
    </ItemGroup>
    <WriteLinesToFile File="$(GeneratedFSharpInternalsVisibleToFile)"
                      Lines="@(_LinesToWrite)"
                      Overwrite="true"
                      Encoding="Unicode"
                      Condition="'$(_UseWriteCodeFragmentHack)' == 'true' and !Exists('$(GeneratedFSharpInternalsVisibleToFile)')" />
  </Target>

</Project>
