<Project>

  <PropertyGroup>
    <!-- we generate our own custom assembly info -->
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
  </PropertyGroup>

  <Target Name="PrepareGenerateAssemblyLevelAttributes">
    <PropertyGroup>
      <GeneratedFSharpAssemblyLevelAttributesFile>$(IntermediateOutputPath)$(MSBuildProjectName).AssemblyLevelAttributes$(DefaultLanguageSourceExtension)</GeneratedFSharpAssemblyLevelAttributesFile>

      <!-- The compiler that currently ships with the SDK doesn't like the Git hash being embedded into the AssemblyInformationalVersionAttribute. -->
      <NoWarn Condition="'$(Language)' == 'F#' AND '$(Configuration)' == 'Proto'">$(NoWarn);2003</NoWarn>
    </PropertyGroup>
  </Target>

  <Target Name="GenerateAssemblyLevelAttributes"
          Inputs="$(MSBuildThisFileFullPath);$(MSBuildProjectFile)"
          Outputs="$(GeneratedFSharpAssemblyLevelAttributesFile)"
          DependsOnTargets="PrepareGenerateAssemblyLevelAttributes;PrepareForBuild"
          BeforeTargets="CoreCompile">

    <WriteCodeFragment AssemblyAttributes="@(AssemblyLevelAttribute)"
                       Language="$(Language)"
                       OutputFile="$(GeneratedFSharpAssemblyLevelAttributesFile)"
                       Condition="'@(AssemblyLevelAttribute)' != ''">
      <Output TaskParameter="OutputFile" ItemName="Compile" Condition="'$(Language)' != 'F#'" />
      <Output TaskParameter="OutputFile" ItemName="CompileBefore" Condition="'$(Language)' == 'F#'" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>

  </Target>

  <Target Name="PrepareGenerateAssemblyFileVersion"
          Condition="'$(Language)' != '' AND '$(GenerateAssemblyVersionAttribute)' != 'false'">
    <PropertyGroup>
      <MicroBuildAssemblyVersion Condition="'$(MicroBuildAssemblyVersion)' == ''">$(FSCoreVersion)</MicroBuildAssemblyVersion>

      <!-- certain delivered F# VS assemblies use a specific MicroBuildAssemblyVersion, otherwise use FSCoreVersion -->
      <MicroBuildAssemblyVersion Condition="'$(UseFSharpProductVersion)' == 'true'">$(FSProductVersion)</MicroBuildAssemblyVersion>

      <!-- certain delivered F# VS assemblies use a specific MicroBuildAssemblyVersion, otherwise use FSCoreVersion -->
      <MicroBuildAssemblyVersion Condition="'$(UseVsMicroBuildAssemblyVersion)' == 'true'">$(VSAssemblyVersion)</MicroBuildAssemblyVersion>

      <GeneratedFSharpAssemblyVersionFile>$(IntermediateOutputPath)$(MSBuildProjectName).AssemblyVersion$(DefaultLanguageSourceExtension)</GeneratedFSharpAssemblyVersionFile>
    </PropertyGroup>
    <PropertyGroup>
      <!-- xbuild and older versions of msbuild don't have F# support for WriteCodeFragment -->
      <_UseWriteCodeFragmentHack Condition="'$(OS)' == 'Unix' and '$(Language)' == 'F#'">true</_UseWriteCodeFragmentHack>
    </PropertyGroup>

    <ItemGroup>
      <_AssemblyVersionAttributes Include="System.Reflection.AssemblyCompanyAttribute">
        <_Parameter1>Microsoft Corporation</_Parameter1>
      </_AssemblyVersionAttributes>
      <_AssemblyVersionAttributes Include="System.Reflection.AssemblyCopyrightAttribute">
        <_Parameter1>&#169; Microsoft Corporation.  All Rights Reserved.</_Parameter1>
      </_AssemblyVersionAttributes>
      <_AssemblyVersionAttributes Include="System.Reflection.AssemblyDescriptionAttribute">
        <_Parameter1>$(AssemblyName)</_Parameter1>
      </_AssemblyVersionAttributes>
      <_AssemblyVersionAttributes Include="System.Reflection.AssemblyFileVersionAttribute">
        <_Parameter1>$(Build_FileVersion)</_Parameter1>
      </_AssemblyVersionAttributes>
      <_AssemblyVersionAttributes Include="System.Reflection.AssemblyInformationalVersionAttribute">
        <_Parameter1>$(MicroBuildAssemblyVersion).  Commit Hash: $(GitHeadSha).</_Parameter1>
      </_AssemblyVersionAttributes>
      <_AssemblyVersionAttributes Include="System.Reflection.AssemblyProductAttribute">
        <_Parameter1>Microsoft&#174; F#</_Parameter1>
      </_AssemblyVersionAttributes>
      <_AssemblyVersionAttributes Include="System.Reflection.AssemblyTitleAttribute">
        <_Parameter1>$(AssemblyName)</_Parameter1>
      </_AssemblyVersionAttributes>
      <_AssemblyVersionAttributes Include="System.Reflection.AssemblyVersionAttribute">
        <_Parameter1>$(MicroBuildAssemblyVersion)</_Parameter1>
      </_AssemblyVersionAttributes>
    </ItemGroup>

  </Target>

  <Target Name="GenerateAssemblyFileVersion"
          Inputs="$(MSBuildThisFileFullPath);$(MSBuildProjectFile)"
          Outputs="$(GeneratedFSharpAssemblyVersionFile)"
          DependsOnTargets="PrepareGenerateAssemblyFileVersion;PrepareForBuild"
          BeforeTargets="CoreCompile">

    <WriteCodeFragment AssemblyAttributes="@(_AssemblyVersionAttributes)"
                       Language="$(Language)"
                       OutputFile="$(GeneratedFSharpAssemblyVersionFile)"
                       Condition="'$(_UseWriteCodeFragmentHack)' != 'true'">
      <!-- For FSharp.Core, assembly version must be inserted after all Core files, as it defines F# basic types (strings) -->
      <Output TaskParameter="OutputFile" ItemName="Compile" Condition="'$(Language)' != 'F#' or '$(AssemblyName)' == 'FSharp.Core'" />
      <!-- For other assemblies, this must be inserted before all source files, to keep exe's EntryPoints (if any) as the last source file -->
      <Output TaskParameter="OutputFile" ItemName="CompileBefore" Condition="'$(Language)' == 'F#' and '$(AssemblyName)' != 'FSharp.Core'" />
      <Output TaskParameter="OutputFile" ItemName="FileWrites" />
    </WriteCodeFragment>

    <ItemGroup Condition="'$(_UseWriteCodeFragmentHack)' == 'true'">
      <_LinesToWrite Include="// &lt;auto-generated&gt;" />
      <_LinesToWrite Include="namespace FSharp" />
      <_LinesToWrite Include="open System" />
      <_LinesToWrite Include="open System.Reflection" />
      <_LinesToWrite Include="[&lt;assembly: %(_AssemblyVersionAttributes.Identity)(&quot;%(_AssemblyVersionAttributes._Parameter1)&quot;)&gt;]" />
      <_LinesToWrite Include="do()" />

      <Compile Include="$(GeneratedFSharpAssemblyVersionFile)" Condition="'$(Language)' != 'F#' or '$(AssemblyName)' == 'FSharp.Core'" />
      <CompileBefore Include="$(GeneratedFSharpAssemblyVersionFile)" Condition="'$(Language)' == 'F#' and '$(AssemblyName)' != 'FSharp.Core'" />
      <FileWrites Include="$(GeneratedFSharpAssemblyVersionFile)" />
    </ItemGroup>

    <WriteLinesToFile File="$(GeneratedFSharpAssemblyVersionFile)"
                      Lines="@(_LinesToWrite)"
                      Overwrite="true"
                      Encoding="Unicode"
                      Condition="'$(_UseWriteCodeFragmentHack)' == 'true' and !Exists('$(GeneratedFSharpAssemblyVersionFile)')" />

  </Target>

</Project>
