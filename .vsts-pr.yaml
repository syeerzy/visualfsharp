jobs:
- job: Linux
  pool:
    vmImage: ubuntu-16.04
  timeoutInMinutes: 90
  strategy:
    maxParallel: 2
    matrix:
      dotnet_sdk:
        _command: make
        _args: Configuration=release
      # disabled until it can be properly fixed
      release_fcs:
        _command: ./fcs/build.sh
        _args: Build
  steps:
  - script: $(_command) $(_args)
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)/artifacts/TestResults'
      ArtifactName: 'Linux $(_command) $(_args)'
      publishLocation: Container
    continueOnError: true
    condition: failed()

- job: Windows
  pool:
    vmImage: vs2017-win2016
  timeoutInMinutes: 120
  strategy:
    maxParallel: 7
    matrix:
      ci_part1:
        _command: build.cmd
        _args: release ci_part1
      ci_part2:
        _command: build.cmd
        _args: release ci_part2
      ci_part3:
        _command: build.cmd
        _args: release ci_part3
      ci_part4:
        _command: build.cmd
        _args: release ci_part4
      debug_default:
        _command: build.cmd
        _args: debug
      net40_no_vs:
        _command: build.cmd
        _args: release net40
      release_fcs:
        _command: fcs\build.cmd
        _args: TestAndNuget
  steps:
  - script: $(_command) $(_args)
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '$(Build.SourcesDirectory)\artifacts\TestResults'
      ArtifactName: 'Windows $(_command) $(_args)'
      publishLocation: Container
    continueOnError: true
    condition: failed()
